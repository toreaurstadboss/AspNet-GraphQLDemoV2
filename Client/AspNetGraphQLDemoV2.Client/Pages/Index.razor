@page "/"
@using Blazorise.DataGrid
@using System.Text.Json

<PageTitle>Index</PageTitle>

<h1>Norwegian Mountains V2</h1>

Clientside : StrawberryShake
Backend: HotChocolate

<UseHentMountains Context="result">
<ChildContent>

    <DataGrid 
          Data="@result.Mountains"
          Filterable="true"          
          FilterMethod="DataGridFilterMethod.Contains"
          ShowPager="true"
          @bind-SelectedRow="@selectedMountain"
          ShowPageSizes="true"
          Editable="true"        
          Striped="true"
          Hoverable="true"
          Responsive="true"
>
    <ChildContent>
        <DataGridCommandColumn TItem="IHentMountains_Mountains"></DataGridCommandColumn>
        <DataGridColumn TItem="IHentMountains_Mountains" Field="Id" Caption="Id" Sortable="false" Displayable="true"/>
        <DataGridColumn TItem="IHentMountains_Mountains" Field="OfficialName" Caption="OfficialName" Sortable="false" Displayable="true"/>
        <DataGridColumn TItem="IHentMountains_Mountains" Field="MetresAboveSeaLevel" Caption="ReferencePoint" Sortable="false" Displayable="true" />
        <DataGridColumn TItem="IHentMountains_Mountains" Field="PrimaryFactor" Caption="PrimaryFactor" Sortable="false" Displayable="true" />
        <DataGridColumn TItem="IHentMountains_Mountains" Field="Municipality" Caption="Municipality" Sortable="false" Displayable="true" />
        <DataGridColumn TItem="IHentMountains_Mountains" Field="ReferencePoint" Caption="ReferencePoint" Sortable="false" Displayable="true"/>
        <DataGridColumn TItem="IHentMountains_Mountains" Field="County" Caption="County" Sortable="false" Displayable="true" />
        <DataGridColumn TItem="IHentMountains_Mountains" Field="Comments" Caption="Comments" Sortable="false" Displayable="true" Editable="true">
                    <EditTemplate>
                        @{
                            var serializedContext = JsonSerializer.Serialize(context); 

                        }
                        <Label><br /><b>@context.Item.OfficialName</b></Label>
                        <TextEdit TValue="string" Text="@((string)context.CellValue)" TextChanged="@( v => { context.CellValue = v; SaveEditedMountain(context.Item); })" />
                    </EditTemplate>
        </DataGridColumn>
    </ChildContent>
    <EmptyTemplate>
        <div class="box">
            No mountains were found.
        </div>
    </EmptyTemplate>
    <LoadingTemplate>
        <div class="box">
            <progress class="progress is-small is-primary" max="100"/>
        </div>
    </LoadingTemplate>
    <ButtonRowTemplate>
        <Button Color="Color.Primary" Disabled="(selectedMountain is null)" Clicked="context.EditCommand.Clicked">Edit</Button>
    </ButtonRowTemplate>

</DataGrid>

</ChildContent>
<LoadingContent>
    this is a test
</LoadingContent>

</UseHentMountains>

<SurveyPrompt Title="How is Blazor working for you?" />


@code {

    [Inject] private ILogger<Index> log { get; init; }

    private IHentMountains_Mountains selectedMountain; 

    //protected void OnSelectedRowChanged(IHentMountains_Mountains_Mountain model)
    //{
    //    log.LogInformation($"selected row changed: {model.ToJson()}");
    //}

    protected async Task SaveEditedMountain(IHentMountains_Mountains mountain) {
        var serializedContext = System.Text.Json.JsonSerializer.Serialize(mountain);
        Console.WriteLine(serializedContext);
        await Task.Delay(100);
    }

    public void OnRowUpdatedAsync(SavedRowItem<IHentMountains_Mountains, Dictionary<string, object>> e)
    {
        // This handler is fired after i hit the save button provided by internal edit functionality.
        IHentMountains_Mountains mountain = e.Item;
        string? comments = e.Values["Comments"] as string; // This gives me old value.
        //TODO: Persist the comments for mountain via a mutation to the GraphQL Server 
        StateHasChanged();
    }

    protected async Task OnReadData(DataGridReadDataEventArgs<IHentMountains_Mountains> e)
    {
        //StateHasChanged();
    }
}

schema {
  query: MountainQueries
  mutation: MountainMutations
  subscription: MountainSubscriptions
}

type MountainQueries {
  mountains(where: MountainFilterInput order: [MountainSortInput!]): [Mountain!]!
  mountainsQueryable: [Mountain!]!
  mountainQueryable(id: Int!): [Mountain!]!
  mountainsPage(skip: Int take: Int where: MountainFilterInput order: [MountainSortInput!]): MountainCollectionSegment
  mountain(id: Int!): Mountain
}

type MountainMutations {
  addMountain(mountainToAdd: MountainInput!): Mountain!
  removeMountain(id: Int!): Mountain
  updateMountainComment(mountainId: Int! comments: String!): Mountain
  updateMountain(mountain: MountainInput!): Mountain
}

type MountainSubscriptions {
  commentUpdated: MountainCommentUpdatedInfo
}

input MountainFilterInput {
  and: [MountainFilterInput!]
  or: [MountainFilterInput!]
  id: ComparableInt32OperationFilterInput
  county: StringOperationFilterInput
  municipality: StringOperationFilterInput
  officialName: StringOperationFilterInput
  metresAboveSeaLevel: ComparableDoubleOperationFilterInput
  primaryFactor: ComparableDoubleOperationFilterInput
  comments: StringOperationFilterInput
  referencePoint: StringOperationFilterInput
}

input MountainSortInput {
  id: SortEnumType
  county: SortEnumType
  municipality: SortEnumType
  officialName: SortEnumType
  metresAboveSeaLevel: SortEnumType
  primaryFactor: SortEnumType
  comments: SortEnumType
  referencePoint: SortEnumType
}

type MountainCollectionSegment {
  items: [Mountain!]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

input ComparableInt32OperationFilterInput {
  eq: Int
  neq: Int
  in: [Int!]
  nin: [Int!]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input ComparableDoubleOperationFilterInput {
  eq: Float
  neq: Float
  in: [Float!]
  nin: [Float!]
  gt: Float
  ngt: Float
  gte: Float
  ngte: Float
  lt: Float
  nlt: Float
  lte: Float
  nlte: Float
}

enum SortEnumType {
  ASC
  DESC
}

type Mountain {
  id: Int!
  county: String
  municipality: String
  officialName: String!
  metresAboveSeaLevel: Float!
  primaryFactor: Float!
  comments: String
  referencePoint: String
}

"Information about the offset pagination."
type CollectionSegmentInfo {
  "Indicates whether more items exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more items exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
}

type MountainCommentUpdatedInfo {
  id: Int
  officialName: String
  comments: String
}

input MountainInput {
  id: Int!
  county: String
  municipality: String
  officialName: String!
  metresAboveSeaLevel: Float!
  primaryFactor: Float!
  comments: String
  referencePoint: String
}
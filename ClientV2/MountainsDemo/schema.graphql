schema {
  query: MountainQueries
  mutation: MountainMutations
}

type MountainQueries {
  mountains(where: MountainFilterInput order: [MountainSortInput!]): [Mountain!]!
  mountainsPage("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: MountainFilterInput order: [MountainSortInput!]): MountainsPageConnection
  mountain(id: Int!): Mountain
}

type MountainMutations {
  addMountain(mountainToAdd: MountainInput!): Mountain!
  removeMountain(id: Int!): Mountain
  updateMountainComment(mountainId: Int! comments: String!): Mountain
  updateMountain(mountain: MountainInput!): Mountain
}

input MountainFilterInput {
  and: [MountainFilterInput!]
  or: [MountainFilterInput!]
  id: ComparableInt32OperationFilterInput
  county: StringOperationFilterInput
  municipality: StringOperationFilterInput
  officialName: StringOperationFilterInput
  metresAboveSeaLevel: ComparableDoubleOperationFilterInput
  primaryFactor: ComparableDoubleOperationFilterInput
  comments: StringOperationFilterInput
  referencePoint: StringOperationFilterInput
}

input MountainSortInput {
  id: SortEnumType
  county: SortEnumType
  municipality: SortEnumType
  officialName: SortEnumType
  metresAboveSeaLevel: SortEnumType
  primaryFactor: SortEnumType
  comments: SortEnumType
  referencePoint: SortEnumType
}

"A connection to a list of items."
type MountainsPageConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [MountainsPageEdge!]
  "A flattened list of the nodes."
  nodes: [Mountain!]
  totalCount: Int!
}

input ComparableInt32OperationFilterInput {
  eq: Int
  neq: Int
  in: [Int!]
  nin: [Int!]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input ComparableDoubleOperationFilterInput {
  eq: Float
  neq: Float
  in: [Float!]
  nin: [Float!]
  gt: Float
  ngt: Float
  gte: Float
  ngte: Float
  lt: Float
  nlt: Float
  lte: Float
  nlte: Float
}

enum SortEnumType {
  ASC
  DESC
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Mountain {
  id: Int!
  county: String
  municipality: String
  officialName: String!
  metresAboveSeaLevel: Float!
  primaryFactor: Float!
  comments: String
  referencePoint: String
}

"An edge in a connection."
type MountainsPageEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Mountain!
}

input MountainInput {
  id: Int!
  county: String
  municipality: String
  officialName: String!
  metresAboveSeaLevel: Float!
  primaryFactor: Float!
  comments: String
  referencePoint: String
}
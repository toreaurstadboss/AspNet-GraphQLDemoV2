@page "/"
@using Blazorise
@using Blazorise.DataGrid
@using System.Text.Json
@using MountainsClientDemoV2
@using MountainsDemo.PresentationModels
@*@using MountainsClientDemoV2*@
@*@using MountainsClientDemoV2
*@

<PageTitle>Index</PageTitle>

<h1>Norwegian Mountains V2</h1>

Clientside : StrawberryShake
Backend: HotChocolate

<DataGrid Data="@mountainsResult"
          TItem="MountainItem"
          Filterable="true"
          FilterMethod="DataGridFilterMethod.Contains"
          ShowPager="true"
          @bind-SelectedRow="@selectedMountain"
          ShowPageSizes="true"
          Editable="true"
          Striped="true"
          EditMode="DataGridEditMode.Popup"
          RowUpdating="OnRowUpdatingAsync"
          RowUpdated="OnRowUpdatedAsync"
          Hoverable="true"
          Responsive="true">
    <ChildContent>
        <DataGridCommandColumn TItem="MountainItem"></DataGridCommandColumn>
        <DataGridColumn TItem="MountainItem" Field="Id" Caption="Id" Sortable="false" Displayable="true" />
        <DataGridColumn TItem="MountainItem" Field="OfficialName" Caption="OfficialName" Sortable="false" Displayable="true" />
        <DataGridColumn TItem="MountainItem" Field="MetresAboveSeaLevel" Caption="ReferencePoint" Sortable="false" Displayable="true" />
        <DataGridColumn TItem="MountainItem" Field="PrimaryFactor" Caption="PrimaryFactor" Sortable="false" Displayable="true" />
        <DataGridColumn TItem="MountainItem" Field="Municipality" Caption="Municipality" Sortable="false" Displayable="true" />
        <DataGridColumn TItem="MountainItem" Field="ReferencePoint" Caption="ReferencePoint" Sortable="false" Displayable="true" />
        <DataGridColumn TItem="MountainItem" Field="County" Caption="County" Sortable="false" Displayable="true" />
        <DataGridColumn TItem="MountainItem" Field="Comments" Caption="Comments" Sortable="false" Displayable="true" Editable="true">
            <EditTemplate>
                <Label><br /><b>@context.Item.OfficialName</b></Label>
                <TextEdit TValue="string"
                          Text="@((string)context.CellValue)"
                          TextChanged="@( v => {                                                   
                                                    context.CellValue = v;
                                                    context.UpdateCell( nameof( MountainItem.Comments ), v);
                                              })" />
            </EditTemplate>
        </DataGridColumn>
    </ChildContent>
    <EmptyTemplate>
        <div class="box">
            No mountains were found.
        </div>
    </EmptyTemplate>
    <LoadingTemplate>
        <div class="box">
            <progress class="progress is-small is-primary" max="100" />
        </div>
    </LoadingTemplate>
    <ButtonRowTemplate>
        <Button Color="Color.Primary" Disabled="(selectedMountain is null)" Clicked="context.EditCommand.Clicked">Edit</Button>
    </ButtonRowTemplate>

</DataGrid>

@*<UseHentMountains Context="result">
<ChildContent>

    <DataGrid
          Data="@result.Mountains"
          Filterable="true"
          FilterMethod="DataGridFilterMethod.Contains"
          ShowPager="true"
          @bind-SelectedRow="@selectedMountain"
          ShowPageSizes="true"
          Editable="true"
          Striped="true"
          Hoverable="true"
          Responsive="true"
>
    <ChildContent>
        <DataGridCommandColumn TItem="MountainItem"></DataGridCommandColumn>
        <DataGridColumn TItem="MountainItem" Field="Id" Caption="Id" Sortable="false" Displayable="true"/>
        <DataGridColumn TItem="MountainItem" Field="OfficialName" Caption="OfficialName" Sortable="false" Displayable="true"/>
        <DataGridColumn TItem="MountainItem" Field="MetresAboveSeaLevel" Caption="ReferencePoint" Sortable="false" Displayable="true" />
        <DataGridColumn TItem="MountainItem" Field="PrimaryFactor" Caption="PrimaryFactor" Sortable="false" Displayable="true" />
        <DataGridColumn TItem="MountainItem" Field="Municipality" Caption="Municipality" Sortable="false" Displayable="true" />
        <DataGridColumn TItem="MountainItem" Field="ReferencePoint" Caption="ReferencePoint" Sortable="false" Displayable="true"/>
        <DataGridColumn TItem="MountainItem" Field="County" Caption="County" Sortable="false" Displayable="true" />
        <DataGridColumn TItem="MountainItem" Field="Comments" Caption="Comments" Sortable="false" Displayable="true" Editable="true">
                    <EditTemplate>
                        @{
                            var serializedContext = JsonSerializer.Serialize(context);

                        }
                        <Label><br /><b>@context.Item.OfficialName</b></Label>
                        <TextEdit TValue="string" Text="@((string)context.CellValue)" TextChanged="@( v => { context.CellValue = v; SaveEditedMountain(context.Item); })" />
                    </EditTemplate>
        </DataGridColumn>
    </ChildContent>
    <EmptyTemplate>
        <div class="box">
            No mountains were found.
        </div>
    </EmptyTemplate>
    <LoadingTemplate>
        <div class="box">
            <progress class="progress is-small is-primary" max="100"/>
        </div>
    </LoadingTemplate>
    <ButtonRowTemplate>
        <Button Color="Color.Primary" Disabled="(selectedMountain is null)" Clicked="context.EditCommand.Clicked">Edit</Button>
    </ButtonRowTemplate>

</DataGrid>

</ChildContent>
<LoadingContent>
    this is a test
</LoadingContent>

</UseHentMountains>*@

@*<SurveyPrompt Title="How is Blazor working for you?" />*@


@code {

    [Inject] private ILogger<Index> log { get; init; }

    [Inject] private MountainsDemoV2 client { get; set; }

    private MountainItem? selectedMountain;

    private IList<MountainItem>? mountainsResult;

    protected void OnSelectedRowChanged(MountainItem model)
    {
        selectedMountain = model;
        log.LogInformation($"selected row (mountain) changed - current id is now: {model.Id}");
    }

    protected async override Task OnParametersSetAsync()
    {
        var mountainsFromServer = await client.GetMountains.ExecuteAsync();
        mountainsResult = mountainsFromServer?.Data?.Mountains?.Select(x => new MountainItem(x)).ToList();
    }

    public void OnRowUpdatingAsync(CancellableRowChange<MountainItem, Dictionary<string, object>> e){
        MountainItem? mountain = e?.Item; 
        if (mountain != null){
            selectedMountain = mountain; 
        }
        else {
            selectedMountain = null;
        }
    }

    public void OnRowUpdatedAsync(SavedRowItem<MountainItem, Dictionary<string, object>> e)
    {
        // This handler is fired after i hit the save button provided by internal edit functionality.
        MountainItem mountain = e.Item;
        string? comments = e.Values["Comments"] as string; // This gives me old value.
                                                           //TODO: Persist the comments for mountain via a mutation to the GraphQL Server
        if (selectedMountain == null || string.IsNullOrEmpty(comments)){
            return;
        }
        else if (selectedMountain.Id >= 1) {
            client.UpdateMountainComment.ExecuteAsync(selectedMountain.Id, comments);
            StateHasChanged();
        }
    }

    //protected async Task OnReadData(DataGridReadDataEventArgs<MountainItem> e)
    //{
    //    //StateHasChanged();
    //}
}

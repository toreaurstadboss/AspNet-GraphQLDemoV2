// <auto-generated/>
#nullable enable

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public static partial class MountainsDemoV2ServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::MountainsClientDemoV2.State.MountainsDemoV2StoreAccessor> AddMountainsDemoV2(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::MountainsClientDemoV2.State.MountainsDemoV2StoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MountainsClientDemoV2.CommentUpdatedSubscription>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MountainsClientDemoV2.MountainsPageQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MountainsClientDemoV2.UpdateMountainCommentMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MountainsClientDemoV2.GetMountainQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MountainsClientDemoV2.GetMountainsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MountainsClientDemoV2.MountainsDemoV2>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MountainsClientDemoV2.IMountainsDemoV2>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::MountainsClientDemoV2.State.MountainsDemoV2StoreAccessor>("MountainsDemoV2", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.WebSockets.IWebSocketConnection>(services, sp =>
            {
                var sessionPool = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.WebSockets.ISessionPool>(parentServices);
                return new global::StrawberryShake.Transport.WebSockets.WebSocketConnection(async ct => await sessionPool.CreateAsync("MountainsDemoV2", ct));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("MountainsDemoV2"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::MountainsClientDemoV2.State.MountainCommentUpdatedInfoEntity, global::MountainsClientDemoV2.CommentUpdated_CommentUpdated_MountainCommentUpdatedInfo>, global::MountainsClientDemoV2.State.CommentUpdated_CommentUpdated_MountainCommentUpdatedInfoFromMountainCommentUpdatedInfoEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::MountainsClientDemoV2.State.MountainEntity, global::MountainsClientDemoV2.MountainsPage_MountainsPage_Items_Mountain>, global::MountainsClientDemoV2.State.MountainsPage_MountainsPage_Items_MountainFromMountainEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::MountainsClientDemoV2.State.MountainEntity, global::MountainsClientDemoV2.UpdateMountainComment_UpdateMountainComment_Mountain>, global::MountainsClientDemoV2.State.UpdateMountainComment_UpdateMountainComment_MountainFromMountainEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::MountainsClientDemoV2.State.MountainEntity, global::MountainsClientDemoV2.GetMountain_Mountain_Mountain>, global::MountainsClientDemoV2.State.GetMountain_Mountain_MountainFromMountainEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::MountainsClientDemoV2.State.MountainEntity, global::MountainsClientDemoV2.GetMountains_Mountains_Mountain>, global::MountainsClientDemoV2.State.GetMountains_Mountains_MountainFromMountainEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::MountainsClientDemoV2.ICommentUpdatedResult>, global::MountainsClientDemoV2.State.CommentUpdatedResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::MountainsClientDemoV2.ICommentUpdatedResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MountainsClientDemoV2.ICommentUpdatedSubscription>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MountainsClientDemoV2.ICommentUpdatedResult>, global::MountainsClientDemoV2.State.CommentUpdatedBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::MountainsClientDemoV2.ICommentUpdatedResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::MountainsClientDemoV2.ICommentUpdatedResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.WebSockets.IWebSocketConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MountainsClientDemoV2.ICommentUpdatedResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MountainsClientDemoV2.CommentUpdatedSubscription>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MountainsClientDemoV2.ICommentUpdatedSubscription>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MountainsClientDemoV2.CommentUpdatedSubscription>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::MountainsClientDemoV2.IMountainsPageResult>, global::MountainsClientDemoV2.State.MountainsPageResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::MountainsClientDemoV2.IMountainsPageResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MountainsClientDemoV2.IMountainsPageQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MountainsClientDemoV2.IMountainsPageResult>, global::MountainsClientDemoV2.State.MountainsPageBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::MountainsClientDemoV2.IMountainsPageResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::MountainsClientDemoV2.IMountainsPageResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MountainsClientDemoV2.IMountainsPageResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MountainsClientDemoV2.MountainsPageQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MountainsClientDemoV2.IMountainsPageQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MountainsClientDemoV2.MountainsPageQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::MountainsClientDemoV2.IUpdateMountainCommentResult>, global::MountainsClientDemoV2.State.UpdateMountainCommentResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::MountainsClientDemoV2.IUpdateMountainCommentResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MountainsClientDemoV2.IUpdateMountainCommentMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MountainsClientDemoV2.IUpdateMountainCommentResult>, global::MountainsClientDemoV2.State.UpdateMountainCommentBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::MountainsClientDemoV2.IUpdateMountainCommentResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::MountainsClientDemoV2.IUpdateMountainCommentResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MountainsClientDemoV2.IUpdateMountainCommentResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MountainsClientDemoV2.UpdateMountainCommentMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MountainsClientDemoV2.IUpdateMountainCommentMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MountainsClientDemoV2.UpdateMountainCommentMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::MountainsClientDemoV2.IGetMountainResult>, global::MountainsClientDemoV2.State.GetMountainResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::MountainsClientDemoV2.IGetMountainResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MountainsClientDemoV2.IGetMountainQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MountainsClientDemoV2.IGetMountainResult>, global::MountainsClientDemoV2.State.GetMountainBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::MountainsClientDemoV2.IGetMountainResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::MountainsClientDemoV2.IGetMountainResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MountainsClientDemoV2.IGetMountainResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MountainsClientDemoV2.GetMountainQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MountainsClientDemoV2.IGetMountainQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MountainsClientDemoV2.GetMountainQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::MountainsClientDemoV2.IGetMountainsResult>, global::MountainsClientDemoV2.State.GetMountainsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::MountainsClientDemoV2.IGetMountainsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MountainsClientDemoV2.IGetMountainsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MountainsClientDemoV2.IGetMountainsResult>, global::MountainsClientDemoV2.State.GetMountainsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::MountainsClientDemoV2.IGetMountainsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::MountainsClientDemoV2.IGetMountainsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MountainsClientDemoV2.IGetMountainsResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MountainsClientDemoV2.GetMountainsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MountainsClientDemoV2.IGetMountainsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MountainsClientDemoV2.GetMountainsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::MountainsClientDemoV2.State.MountainsDemoV2EntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MountainsClientDemoV2.MountainsDemoV2>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MountainsClientDemoV2.IMountainsDemoV2>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MountainsClientDemoV2.MountainsDemoV2>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}

namespace MountainsClientDemoV2
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class CommentUpdatedResult : global::System.IEquatable<CommentUpdatedResult>, ICommentUpdatedResult
    {
        public CommentUpdatedResult(global::MountainsClientDemoV2.ICommentUpdated_CommentUpdated? commentUpdated)
        {
            CommentUpdated = commentUpdated;
        }

        public global::MountainsClientDemoV2.ICommentUpdated_CommentUpdated? CommentUpdated { get; }

        public virtual global::System.Boolean Equals(CommentUpdatedResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((CommentUpdated is null && other.CommentUpdated is null) || CommentUpdated != null && CommentUpdated.Equals(other.CommentUpdated)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CommentUpdatedResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (CommentUpdated != null)
                {
                    hash ^= 397 * CommentUpdated.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class CommentUpdated_CommentUpdated_MountainCommentUpdatedInfo : global::System.IEquatable<CommentUpdated_CommentUpdated_MountainCommentUpdatedInfo>, ICommentUpdated_CommentUpdated_MountainCommentUpdatedInfo
    {
        public CommentUpdated_CommentUpdated_MountainCommentUpdatedInfo(global::System.Int32? id, global::System.String? officialName, global::System.String? comments)
        {
            Id = id;
            OfficialName = officialName;
            Comments = comments;
        }

        public global::System.Int32? Id { get; }

        public global::System.String? OfficialName { get; }

        public global::System.String? Comments { get; }

        public virtual global::System.Boolean Equals(CommentUpdated_CommentUpdated_MountainCommentUpdatedInfo? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && ((OfficialName is null && other.OfficialName is null) || OfficialName != null && OfficialName.Equals(other.OfficialName)) && ((Comments is null && other.Comments is null) || Comments != null && Comments.Equals(other.Comments));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CommentUpdated_CommentUpdated_MountainCommentUpdatedInfo)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (OfficialName != null)
                {
                    hash ^= 397 * OfficialName.GetHashCode();
                }

                if (Comments != null)
                {
                    hash ^= 397 * Comments.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface ICommentUpdatedResult
    {
        public global::MountainsClientDemoV2.ICommentUpdated_CommentUpdated? CommentUpdated { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface ICommentUpdated_CommentUpdated
    {
        public global::System.Int32? Id { get; }

        public global::System.String? OfficialName { get; }

        public global::System.String? Comments { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface ICommentUpdated_CommentUpdated_MountainCommentUpdatedInfo : ICommentUpdated_CommentUpdated
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class MountainsPageResult : global::System.IEquatable<MountainsPageResult>, IMountainsPageResult
    {
        public MountainsPageResult(global::MountainsClientDemoV2.IMountainsPage_MountainsPage? mountainsPage)
        {
            MountainsPage = mountainsPage;
        }

        public global::MountainsClientDemoV2.IMountainsPage_MountainsPage? MountainsPage { get; }

        public virtual global::System.Boolean Equals(MountainsPageResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((MountainsPage is null && other.MountainsPage is null) || MountainsPage != null && MountainsPage.Equals(other.MountainsPage)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((MountainsPageResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (MountainsPage != null)
                {
                    hash ^= 397 * MountainsPage.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class MountainsPage_MountainsPage_MountainCollectionSegment : global::System.IEquatable<MountainsPage_MountainsPage_MountainCollectionSegment>, IMountainsPage_MountainsPage_MountainCollectionSegment
    {
        public MountainsPage_MountainsPage_MountainCollectionSegment(global::System.Int32 totalCount, global::MountainsClientDemoV2.IMountainsPage_MountainsPage_PageInfo pageInfo, global::System.Collections.Generic.IReadOnlyList<global::MountainsClientDemoV2.IMountainsPage_MountainsPage_Items>? items)
        {
            TotalCount = totalCount;
            PageInfo = pageInfo;
            Items = items;
        }

        public global::System.Int32 TotalCount { get; }

        /// <summary>
        /// Information to aid in pagination.
        /// </summary>
        public global::MountainsClientDemoV2.IMountainsPage_MountainsPage_PageInfo PageInfo { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::MountainsClientDemoV2.IMountainsPage_MountainsPage_Items>? Items { get; }

        public virtual global::System.Boolean Equals(MountainsPage_MountainsPage_MountainCollectionSegment? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (TotalCount == other.TotalCount) && PageInfo.Equals(other.PageInfo) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Items, other.Items);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((MountainsPage_MountainsPage_MountainCollectionSegment)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * TotalCount.GetHashCode();
                hash ^= 397 * PageInfo.GetHashCode();
                if (Items != null)
                {
                    foreach (var Items_elm in Items)
                    {
                        hash ^= 397 * Items_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Information about the offset pagination.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class MountainsPage_MountainsPage_PageInfo_CollectionSegmentInfo : global::System.IEquatable<MountainsPage_MountainsPage_PageInfo_CollectionSegmentInfo>, IMountainsPage_MountainsPage_PageInfo_CollectionSegmentInfo
    {
        public MountainsPage_MountainsPage_PageInfo_CollectionSegmentInfo(global::System.Boolean hasNextPage, global::System.Boolean hasPreviousPage)
        {
            HasNextPage = hasNextPage;
            HasPreviousPage = hasPreviousPage;
        }

        /// <summary>
        /// Indicates whether more items exist following the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasNextPage { get; }

        /// <summary>
        /// Indicates whether more items exist prior the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasPreviousPage { get; }

        public virtual global::System.Boolean Equals(MountainsPage_MountainsPage_PageInfo_CollectionSegmentInfo? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (HasNextPage == other.HasNextPage) && HasPreviousPage == other.HasPreviousPage;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((MountainsPage_MountainsPage_PageInfo_CollectionSegmentInfo)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * HasNextPage.GetHashCode();
                hash ^= 397 * HasPreviousPage.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class MountainsPage_MountainsPage_Items_Mountain : global::System.IEquatable<MountainsPage_MountainsPage_Items_Mountain>, IMountainsPage_MountainsPage_Items_Mountain
    {
        public MountainsPage_MountainsPage_Items_Mountain(global::System.Int32 id, global::System.String officialName, global::System.Double metresAboveSeaLevel, global::System.String? county, global::System.String? municipality, global::System.Double primaryFactor, global::System.String? referencePoint, global::System.String? comments)
        {
            Id = id;
            OfficialName = officialName;
            MetresAboveSeaLevel = metresAboveSeaLevel;
            County = county;
            Municipality = municipality;
            PrimaryFactor = primaryFactor;
            ReferencePoint = referencePoint;
            Comments = comments;
        }

        public global::System.Int32 Id { get; }

        public global::System.String OfficialName { get; }

        public global::System.Double MetresAboveSeaLevel { get; }

        public global::System.String? County { get; }

        public global::System.String? Municipality { get; }

        public global::System.Double PrimaryFactor { get; }

        public global::System.String? ReferencePoint { get; }

        public global::System.String? Comments { get; }

        public virtual global::System.Boolean Equals(MountainsPage_MountainsPage_Items_Mountain? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && OfficialName.Equals(other.OfficialName) && MetresAboveSeaLevel == other.MetresAboveSeaLevel && ((County is null && other.County is null) || County != null && County.Equals(other.County)) && ((Municipality is null && other.Municipality is null) || Municipality != null && Municipality.Equals(other.Municipality)) && PrimaryFactor == other.PrimaryFactor && ((ReferencePoint is null && other.ReferencePoint is null) || ReferencePoint != null && ReferencePoint.Equals(other.ReferencePoint)) && ((Comments is null && other.Comments is null) || Comments != null && Comments.Equals(other.Comments));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((MountainsPage_MountainsPage_Items_Mountain)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * OfficialName.GetHashCode();
                hash ^= 397 * MetresAboveSeaLevel.GetHashCode();
                if (County != null)
                {
                    hash ^= 397 * County.GetHashCode();
                }

                if (Municipality != null)
                {
                    hash ^= 397 * Municipality.GetHashCode();
                }

                hash ^= 397 * PrimaryFactor.GetHashCode();
                if (ReferencePoint != null)
                {
                    hash ^= 397 * ReferencePoint.GetHashCode();
                }

                if (Comments != null)
                {
                    hash ^= 397 * Comments.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IMountainsPageResult
    {
        public global::MountainsClientDemoV2.IMountainsPage_MountainsPage? MountainsPage { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IMountainsPage_MountainsPage
    {
        public global::System.Int32 TotalCount { get; }

        /// <summary>
        /// Information to aid in pagination.
        /// </summary>
        public global::MountainsClientDemoV2.IMountainsPage_MountainsPage_PageInfo PageInfo { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::MountainsClientDemoV2.IMountainsPage_MountainsPage_Items>? Items { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IMountainsPage_MountainsPage_MountainCollectionSegment : IMountainsPage_MountainsPage
    {
    }

    /// <summary>
    /// Information about the offset pagination.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IMountainsPage_MountainsPage_PageInfo
    {
        /// <summary>
        /// Indicates whether more items exist following the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasNextPage { get; }

        /// <summary>
        /// Indicates whether more items exist prior the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasPreviousPage { get; }
    }

    /// <summary>
    /// Information about the offset pagination.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IMountainsPage_MountainsPage_PageInfo_CollectionSegmentInfo : IMountainsPage_MountainsPage_PageInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IMountainsPage_MountainsPage_Items
    {
        public global::System.Int32 Id { get; }

        public global::System.String OfficialName { get; }

        public global::System.Double MetresAboveSeaLevel { get; }

        public global::System.String? County { get; }

        public global::System.String? Municipality { get; }

        public global::System.Double PrimaryFactor { get; }

        public global::System.String? ReferencePoint { get; }

        public global::System.String? Comments { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IMountainsPage_MountainsPage_Items_Mountain : IMountainsPage_MountainsPage_Items
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class UpdateMountainCommentResult : global::System.IEquatable<UpdateMountainCommentResult>, IUpdateMountainCommentResult
    {
        public UpdateMountainCommentResult(global::MountainsClientDemoV2.IUpdateMountainComment_UpdateMountainComment? updateMountainComment)
        {
            UpdateMountainComment = updateMountainComment;
        }

        public global::MountainsClientDemoV2.IUpdateMountainComment_UpdateMountainComment? UpdateMountainComment { get; }

        public virtual global::System.Boolean Equals(UpdateMountainCommentResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((UpdateMountainComment is null && other.UpdateMountainComment is null) || UpdateMountainComment != null && UpdateMountainComment.Equals(other.UpdateMountainComment)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UpdateMountainCommentResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (UpdateMountainComment != null)
                {
                    hash ^= 397 * UpdateMountainComment.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class UpdateMountainComment_UpdateMountainComment_Mountain : global::System.IEquatable<UpdateMountainComment_UpdateMountainComment_Mountain>, IUpdateMountainComment_UpdateMountainComment_Mountain
    {
        public UpdateMountainComment_UpdateMountainComment_Mountain(global::System.Int32 id, global::System.String? comments)
        {
            Id = id;
            Comments = comments;
        }

        public global::System.Int32 Id { get; }

        public global::System.String? Comments { get; }

        public virtual global::System.Boolean Equals(UpdateMountainComment_UpdateMountainComment_Mountain? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && ((Comments is null && other.Comments is null) || Comments != null && Comments.Equals(other.Comments));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UpdateMountainComment_UpdateMountainComment_Mountain)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Comments != null)
                {
                    hash ^= 397 * Comments.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IUpdateMountainCommentResult
    {
        public global::MountainsClientDemoV2.IUpdateMountainComment_UpdateMountainComment? UpdateMountainComment { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IUpdateMountainComment_UpdateMountainComment
    {
        public global::System.Int32 Id { get; }

        public global::System.String? Comments { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IUpdateMountainComment_UpdateMountainComment_Mountain : IUpdateMountainComment_UpdateMountainComment
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetMountainResult : global::System.IEquatable<GetMountainResult>, IGetMountainResult
    {
        public GetMountainResult(global::MountainsClientDemoV2.IGetMountain_Mountain? mountain)
        {
            Mountain = mountain;
        }

        public global::MountainsClientDemoV2.IGetMountain_Mountain? Mountain { get; }

        public virtual global::System.Boolean Equals(GetMountainResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Mountain is null && other.Mountain is null) || Mountain != null && Mountain.Equals(other.Mountain)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMountainResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Mountain != null)
                {
                    hash ^= 397 * Mountain.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetMountain_Mountain_Mountain : global::System.IEquatable<GetMountain_Mountain_Mountain>, IGetMountain_Mountain_Mountain
    {
        public GetMountain_Mountain_Mountain(global::System.Int32 id, global::System.String officialName, global::System.Double metresAboveSeaLevel, global::System.Double primaryFactor, global::System.String? referencePoint, global::System.String? county, global::System.String? comments, global::System.String? municipality)
        {
            Id = id;
            OfficialName = officialName;
            MetresAboveSeaLevel = metresAboveSeaLevel;
            PrimaryFactor = primaryFactor;
            ReferencePoint = referencePoint;
            County = county;
            Comments = comments;
            Municipality = municipality;
        }

        public global::System.Int32 Id { get; }

        public global::System.String OfficialName { get; }

        public global::System.Double MetresAboveSeaLevel { get; }

        public global::System.Double PrimaryFactor { get; }

        public global::System.String? ReferencePoint { get; }

        public global::System.String? County { get; }

        public global::System.String? Comments { get; }

        public global::System.String? Municipality { get; }

        public virtual global::System.Boolean Equals(GetMountain_Mountain_Mountain? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && OfficialName.Equals(other.OfficialName) && MetresAboveSeaLevel == other.MetresAboveSeaLevel && PrimaryFactor == other.PrimaryFactor && ((ReferencePoint is null && other.ReferencePoint is null) || ReferencePoint != null && ReferencePoint.Equals(other.ReferencePoint)) && ((County is null && other.County is null) || County != null && County.Equals(other.County)) && ((Comments is null && other.Comments is null) || Comments != null && Comments.Equals(other.Comments)) && ((Municipality is null && other.Municipality is null) || Municipality != null && Municipality.Equals(other.Municipality));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMountain_Mountain_Mountain)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * OfficialName.GetHashCode();
                hash ^= 397 * MetresAboveSeaLevel.GetHashCode();
                hash ^= 397 * PrimaryFactor.GetHashCode();
                if (ReferencePoint != null)
                {
                    hash ^= 397 * ReferencePoint.GetHashCode();
                }

                if (County != null)
                {
                    hash ^= 397 * County.GetHashCode();
                }

                if (Comments != null)
                {
                    hash ^= 397 * Comments.GetHashCode();
                }

                if (Municipality != null)
                {
                    hash ^= 397 * Municipality.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetMountainResult
    {
        public global::MountainsClientDemoV2.IGetMountain_Mountain? Mountain { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetMountain_Mountain
    {
        public global::System.Int32 Id { get; }

        public global::System.String OfficialName { get; }

        public global::System.Double MetresAboveSeaLevel { get; }

        public global::System.Double PrimaryFactor { get; }

        public global::System.String? ReferencePoint { get; }

        public global::System.String? County { get; }

        public global::System.String? Comments { get; }

        public global::System.String? Municipality { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetMountain_Mountain_Mountain : IGetMountain_Mountain
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetMountainsResult : global::System.IEquatable<GetMountainsResult>, IGetMountainsResult
    {
        public GetMountainsResult(global::System.Collections.Generic.IReadOnlyList<global::MountainsClientDemoV2.IGetMountains_Mountains> mountains)
        {
            Mountains = mountains;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::MountainsClientDemoV2.IGetMountains_Mountains> Mountains { get; }

        public virtual global::System.Boolean Equals(GetMountainsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Mountains, other.Mountains));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMountainsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Mountains_elm in Mountains)
                {
                    hash ^= 397 * Mountains_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetMountains_Mountains_Mountain : global::System.IEquatable<GetMountains_Mountains_Mountain>, IGetMountains_Mountains_Mountain
    {
        public GetMountains_Mountains_Mountain(global::System.Int32 id, global::System.String officialName, global::System.Double metresAboveSeaLevel, global::System.Double primaryFactor, global::System.String? referencePoint, global::System.String? county, global::System.String? municipality, global::System.String? comments)
        {
            Id = id;
            OfficialName = officialName;
            MetresAboveSeaLevel = metresAboveSeaLevel;
            PrimaryFactor = primaryFactor;
            ReferencePoint = referencePoint;
            County = county;
            Municipality = municipality;
            Comments = comments;
        }

        public global::System.Int32 Id { get; }

        public global::System.String OfficialName { get; }

        public global::System.Double MetresAboveSeaLevel { get; }

        public global::System.Double PrimaryFactor { get; }

        public global::System.String? ReferencePoint { get; }

        public global::System.String? County { get; }

        public global::System.String? Municipality { get; }

        public global::System.String? Comments { get; }

        public virtual global::System.Boolean Equals(GetMountains_Mountains_Mountain? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && OfficialName.Equals(other.OfficialName) && MetresAboveSeaLevel == other.MetresAboveSeaLevel && PrimaryFactor == other.PrimaryFactor && ((ReferencePoint is null && other.ReferencePoint is null) || ReferencePoint != null && ReferencePoint.Equals(other.ReferencePoint)) && ((County is null && other.County is null) || County != null && County.Equals(other.County)) && ((Municipality is null && other.Municipality is null) || Municipality != null && Municipality.Equals(other.Municipality)) && ((Comments is null && other.Comments is null) || Comments != null && Comments.Equals(other.Comments));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMountains_Mountains_Mountain)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * OfficialName.GetHashCode();
                hash ^= 397 * MetresAboveSeaLevel.GetHashCode();
                hash ^= 397 * PrimaryFactor.GetHashCode();
                if (ReferencePoint != null)
                {
                    hash ^= 397 * ReferencePoint.GetHashCode();
                }

                if (County != null)
                {
                    hash ^= 397 * County.GetHashCode();
                }

                if (Municipality != null)
                {
                    hash ^= 397 * Municipality.GetHashCode();
                }

                if (Comments != null)
                {
                    hash ^= 397 * Comments.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetMountainsResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::MountainsClientDemoV2.IGetMountains_Mountains> Mountains { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetMountains_Mountains
    {
        public global::System.Int32 Id { get; }

        public global::System.String OfficialName { get; }

        public global::System.Double MetresAboveSeaLevel { get; }

        public global::System.Double PrimaryFactor { get; }

        public global::System.String? ReferencePoint { get; }

        public global::System.String? County { get; }

        public global::System.String? Municipality { get; }

        public global::System.String? Comments { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetMountains_Mountains_Mountain : IGetMountains_Mountains
    {
    }

    /// <summary>
    /// Represents the operation service of the CommentUpdated GraphQL operation
    /// <code>
    /// subscription CommentUpdated {
    ///   commentUpdated {
    ///     __typename
    ///     id
    ///     officialName
    ///     comments
    ///     ... on MountainCommentUpdatedInfo {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class CommentUpdatedSubscriptionDocument : global::StrawberryShake.IDocument
    {
        private CommentUpdatedSubscriptionDocument()
        {
        }

        public static CommentUpdatedSubscriptionDocument Instance { get; } = new CommentUpdatedSubscriptionDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Subscription;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x20, 0x7b, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "3376e696cfa0e06ef34096e07a0a81c3");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the CommentUpdated GraphQL operation
    /// <code>
    /// subscription CommentUpdated {
    ///   commentUpdated {
    ///     __typename
    ///     id
    ///     officialName
    ///     comments
    ///     ... on MountainCommentUpdatedInfo {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class CommentUpdatedSubscription : global::MountainsClientDemoV2.ICommentUpdatedSubscription
    {
        private readonly global::StrawberryShake.IOperationExecutor<ICommentUpdatedResult> _operationExecutor;
        public CommentUpdatedSubscription(global::StrawberryShake.IOperationExecutor<ICommentUpdatedResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ICommentUpdatedResult);
        public global::System.IObservable<global::StrawberryShake.IOperationResult<ICommentUpdatedResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: CommentUpdatedSubscriptionDocument.Instance.Hash.Value, name: "CommentUpdated", document: CommentUpdatedSubscriptionDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the CommentUpdated GraphQL operation
    /// <code>
    /// subscription CommentUpdated {
    ///   commentUpdated {
    ///     __typename
    ///     id
    ///     officialName
    ///     comments
    ///     ... on MountainCommentUpdatedInfo {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface ICommentUpdatedSubscription : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.IObservable<global::StrawberryShake.IOperationResult<ICommentUpdatedResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the MountainsPage GraphQL operation
    /// <code>
    /// query MountainsPage($pageSize: Int, $startIndex: Int) {
    ///   mountainsPage(take: $pageSize, skip: $startIndex) {
    ///     __typename
    ///     totalCount
    ///     pageInfo {
    ///       __typename
    ///       hasNextPage
    ///       hasPreviousPage
    ///     }
    ///     items {
    ///       __typename
    ///       id
    ///       officialName
    ///       metresAboveSeaLevel
    ///       county
    ///       municipality
    ///       primaryFactor
    ///       referencePoint
    ///       comments
    ///       ... on Mountain {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class MountainsPageQueryDocument : global::StrawberryShake.IDocument
    {
        private MountainsPageQueryDocument()
        {
        }

        public static MountainsPageQueryDocument Instance { get; } = new MountainsPageQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x50, 0x61, 0x67, 0x65, 0x28, 0x24, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x2c, 0x20, 0x24, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x50, 0x61, 0x67, 0x65, 0x28, 0x74, 0x61, 0x6b, 0x65, 0x3a, 0x20, 0x24, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x2c, 0x20, 0x73, 0x6b, 0x69, 0x70, 0x3a, 0x20, 0x24, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x20, 0x68, 0x61, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x50, 0x61, 0x67, 0x65, 0x20, 0x7d, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x72, 0x65, 0x73, 0x41, 0x62, 0x6f, 0x76, 0x65, 0x53, 0x65, 0x61, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x20, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "17866c4236152e28bf6117a1eaf0b11b");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the MountainsPage GraphQL operation
    /// <code>
    /// query MountainsPage($pageSize: Int, $startIndex: Int) {
    ///   mountainsPage(take: $pageSize, skip: $startIndex) {
    ///     __typename
    ///     totalCount
    ///     pageInfo {
    ///       __typename
    ///       hasNextPage
    ///       hasPreviousPage
    ///     }
    ///     items {
    ///       __typename
    ///       id
    ///       officialName
    ///       metresAboveSeaLevel
    ///       county
    ///       municipality
    ///       primaryFactor
    ///       referencePoint
    ///       comments
    ///       ... on Mountain {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class MountainsPageQuery : global::MountainsClientDemoV2.IMountainsPageQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IMountainsPageResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        public MountainsPageQuery(global::StrawberryShake.IOperationExecutor<IMountainsPageResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IMountainsPageResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IMountainsPageResult>> ExecuteAsync(global::System.Int32? pageSize, global::System.Int32? startIndex, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(pageSize, startIndex);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IMountainsPageResult>> Watch(global::System.Int32? pageSize, global::System.Int32? startIndex, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(pageSize, startIndex);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32? pageSize, global::System.Int32? startIndex)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("pageSize", FormatPageSize(pageSize));
            variables.Add("startIndex", FormatStartIndex(startIndex));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: MountainsPageQueryDocument.Instance.Hash.Value, name: "MountainsPage", document: MountainsPageQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatPageSize(global::System.Int32? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _intFormatter.Format(value);
            }
        }

        private global::System.Object? FormatStartIndex(global::System.Int32? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _intFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the MountainsPage GraphQL operation
    /// <code>
    /// query MountainsPage($pageSize: Int, $startIndex: Int) {
    ///   mountainsPage(take: $pageSize, skip: $startIndex) {
    ///     __typename
    ///     totalCount
    ///     pageInfo {
    ///       __typename
    ///       hasNextPage
    ///       hasPreviousPage
    ///     }
    ///     items {
    ///       __typename
    ///       id
    ///       officialName
    ///       metresAboveSeaLevel
    ///       county
    ///       municipality
    ///       primaryFactor
    ///       referencePoint
    ///       comments
    ///       ... on Mountain {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IMountainsPageQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IMountainsPageResult>> ExecuteAsync(global::System.Int32? pageSize, global::System.Int32? startIndex, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IMountainsPageResult>> Watch(global::System.Int32? pageSize, global::System.Int32? startIndex, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the UpdateMountainComment GraphQL operation
    /// <code>
    /// mutation UpdateMountainComment($mountainId: Int!, $comments: String!) {
    ///   updateMountainComment(mountainId: $mountainId, comments: $comments) {
    ///     __typename
    ///     id
    ///     comments
    ///     ... on Mountain {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class UpdateMountainCommentMutationDocument : global::StrawberryShake.IDocument
    {
        private UpdateMountainCommentMutationDocument()
        {
        }

        public static UpdateMountainCommentMutationDocument Instance { get; } = new UpdateMountainCommentMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x24, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x20, 0x24, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "9b439a19d68100b3b3c75fb53e74b9dd");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the UpdateMountainComment GraphQL operation
    /// <code>
    /// mutation UpdateMountainComment($mountainId: Int!, $comments: String!) {
    ///   updateMountainComment(mountainId: $mountainId, comments: $comments) {
    ///     __typename
    ///     id
    ///     comments
    ///     ... on Mountain {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class UpdateMountainCommentMutation : global::MountainsClientDemoV2.IUpdateMountainCommentMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IUpdateMountainCommentResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public UpdateMountainCommentMutation(global::StrawberryShake.IOperationExecutor<IUpdateMountainCommentResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IUpdateMountainCommentResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUpdateMountainCommentResult>> ExecuteAsync(global::System.Int32 mountainId, global::System.String comments, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(mountainId, comments);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IUpdateMountainCommentResult>> Watch(global::System.Int32 mountainId, global::System.String comments, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(mountainId, comments);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 mountainId, global::System.String comments)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("mountainId", FormatMountainId(mountainId));
            variables.Add("comments", FormatComments(comments));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: UpdateMountainCommentMutationDocument.Instance.Hash.Value, name: "UpdateMountainComment", document: UpdateMountainCommentMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatMountainId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatComments(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the UpdateMountainComment GraphQL operation
    /// <code>
    /// mutation UpdateMountainComment($mountainId: Int!, $comments: String!) {
    ///   updateMountainComment(mountainId: $mountainId, comments: $comments) {
    ///     __typename
    ///     id
    ///     comments
    ///     ... on Mountain {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IUpdateMountainCommentMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUpdateMountainCommentResult>> ExecuteAsync(global::System.Int32 mountainId, global::System.String comments, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IUpdateMountainCommentResult>> Watch(global::System.Int32 mountainId, global::System.String comments, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetMountain GraphQL operation
    /// <code>
    /// query GetMountain($id: Int!) {
    ///   mountain(id: $id) {
    ///     __typename
    ///     id
    ///     officialName
    ///     metresAboveSeaLevel
    ///     primaryFactor
    ///     referencePoint
    ///     county
    ///     comments
    ///     municipality
    ///     ... on Mountain {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetMountainQueryDocument : global::StrawberryShake.IDocument
    {
        private GetMountainQueryDocument()
        {
        }

        public static GetMountainQueryDocument Instance { get; } = new GetMountainQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x28, 0x24, 0x69, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x28, 0x69, 0x64, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x72, 0x65, 0x73, 0x41, 0x62, 0x6f, 0x76, 0x65, 0x53, 0x65, 0x61, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x20, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "dfbd1df41ca62c78eff549c6fe8fcb72");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetMountain GraphQL operation
    /// <code>
    /// query GetMountain($id: Int!) {
    ///   mountain(id: $id) {
    ///     __typename
    ///     id
    ///     officialName
    ///     metresAboveSeaLevel
    ///     primaryFactor
    ///     referencePoint
    ///     county
    ///     comments
    ///     municipality
    ///     ... on Mountain {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetMountainQuery : global::MountainsClientDemoV2.IGetMountainQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetMountainResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        public GetMountainQuery(global::StrawberryShake.IOperationExecutor<IGetMountainResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetMountainResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetMountainResult>> ExecuteAsync(global::System.Int32 id, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetMountainResult>> Watch(global::System.Int32 id, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("id", FormatId(id));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetMountainQueryDocument.Instance.Hash.Value, name: "GetMountain", document: GetMountainQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetMountain GraphQL operation
    /// <code>
    /// query GetMountain($id: Int!) {
    ///   mountain(id: $id) {
    ///     __typename
    ///     id
    ///     officialName
    ///     metresAboveSeaLevel
    ///     primaryFactor
    ///     referencePoint
    ///     county
    ///     comments
    ///     municipality
    ///     ... on Mountain {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetMountainQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetMountainResult>> ExecuteAsync(global::System.Int32 id, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetMountainResult>> Watch(global::System.Int32 id, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetMountains GraphQL operation
    /// <code>
    /// query GetMountains {
    ///   mountains {
    ///     __typename
    ///     id
    ///     officialName
    ///     metresAboveSeaLevel
    ///     primaryFactor
    ///     officialName
    ///     referencePoint
    ///     county
    ///     municipality
    ///     comments
    ///     ... on Mountain {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetMountainsQueryDocument : global::StrawberryShake.IDocument
    {
        private GetMountainsQueryDocument()
        {
        }

        public static GetMountainsQueryDocument Instance { get; } = new GetMountainsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x7b, 0x20, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x72, 0x65, 0x73, 0x41, 0x62, 0x6f, 0x76, 0x65, 0x53, 0x65, 0x61, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x20, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x20, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "9476b44138b46fa851475f7c6eadb0e7");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetMountains GraphQL operation
    /// <code>
    /// query GetMountains {
    ///   mountains {
    ///     __typename
    ///     id
    ///     officialName
    ///     metresAboveSeaLevel
    ///     primaryFactor
    ///     officialName
    ///     referencePoint
    ///     county
    ///     municipality
    ///     comments
    ///     ... on Mountain {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetMountainsQuery : global::MountainsClientDemoV2.IGetMountainsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetMountainsResult> _operationExecutor;
        public GetMountainsQuery(global::StrawberryShake.IOperationExecutor<IGetMountainsResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetMountainsResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetMountainsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetMountainsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetMountainsQueryDocument.Instance.Hash.Value, name: "GetMountains", document: GetMountainsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetMountains GraphQL operation
    /// <code>
    /// query GetMountains {
    ///   mountains {
    ///     __typename
    ///     id
    ///     officialName
    ///     metresAboveSeaLevel
    ///     primaryFactor
    ///     officialName
    ///     referencePoint
    ///     county
    ///     municipality
    ///     comments
    ///     ... on Mountain {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetMountainsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetMountainsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetMountainsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the MountainsDemoV2 GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class MountainsDemoV2 : global::MountainsClientDemoV2.IMountainsDemoV2
    {
        private readonly global::MountainsClientDemoV2.ICommentUpdatedSubscription _commentUpdated;
        private readonly global::MountainsClientDemoV2.IMountainsPageQuery _mountainsPage;
        private readonly global::MountainsClientDemoV2.IUpdateMountainCommentMutation _updateMountainComment;
        private readonly global::MountainsClientDemoV2.IGetMountainQuery _getMountain;
        private readonly global::MountainsClientDemoV2.IGetMountainsQuery _getMountains;
        public MountainsDemoV2(global::MountainsClientDemoV2.ICommentUpdatedSubscription commentUpdated, global::MountainsClientDemoV2.IMountainsPageQuery mountainsPage, global::MountainsClientDemoV2.IUpdateMountainCommentMutation updateMountainComment, global::MountainsClientDemoV2.IGetMountainQuery getMountain, global::MountainsClientDemoV2.IGetMountainsQuery getMountains)
        {
            _commentUpdated = commentUpdated ?? throw new global::System.ArgumentNullException(nameof(commentUpdated));
            _mountainsPage = mountainsPage ?? throw new global::System.ArgumentNullException(nameof(mountainsPage));
            _updateMountainComment = updateMountainComment ?? throw new global::System.ArgumentNullException(nameof(updateMountainComment));
            _getMountain = getMountain ?? throw new global::System.ArgumentNullException(nameof(getMountain));
            _getMountains = getMountains ?? throw new global::System.ArgumentNullException(nameof(getMountains));
        }

        public static global::System.String ClientName => "MountainsDemoV2";
        public global::MountainsClientDemoV2.ICommentUpdatedSubscription CommentUpdated => _commentUpdated;
        public global::MountainsClientDemoV2.IMountainsPageQuery MountainsPage => _mountainsPage;
        public global::MountainsClientDemoV2.IUpdateMountainCommentMutation UpdateMountainComment => _updateMountainComment;
        public global::MountainsClientDemoV2.IGetMountainQuery GetMountain => _getMountain;
        public global::MountainsClientDemoV2.IGetMountainsQuery GetMountains => _getMountains;
    }

    /// <summary>
    /// Represents the MountainsDemoV2 GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IMountainsDemoV2
    {
        global::MountainsClientDemoV2.ICommentUpdatedSubscription CommentUpdated { get; }

        global::MountainsClientDemoV2.IMountainsPageQuery MountainsPage { get; }

        global::MountainsClientDemoV2.IUpdateMountainCommentMutation UpdateMountainComment { get; }

        global::MountainsClientDemoV2.IGetMountainQuery GetMountain { get; }

        global::MountainsClientDemoV2.IGetMountainsQuery GetMountains { get; }
    }
}

namespace MountainsClientDemoV2.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class MountainCommentUpdatedInfoEntity
    {
        public MountainCommentUpdatedInfoEntity(global::System.Int32? id = default !, global::System.String? officialName = default !, global::System.String? comments = default !)
        {
            Id = id;
            OfficialName = officialName;
            Comments = comments;
        }

        public global::System.Int32? Id { get; }

        public global::System.String? OfficialName { get; }

        public global::System.String? Comments { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class MountainEntity
    {
        public MountainEntity(global::System.Int32 id = default !, global::System.String officialName = default !, global::System.Double metresAboveSeaLevel = default !, global::System.String? county = default !, global::System.String? municipality = default !, global::System.Double primaryFactor = default !, global::System.String? referencePoint = default !, global::System.String? comments = default !)
        {
            Id = id;
            OfficialName = officialName;
            MetresAboveSeaLevel = metresAboveSeaLevel;
            County = county;
            Municipality = municipality;
            PrimaryFactor = primaryFactor;
            ReferencePoint = referencePoint;
            Comments = comments;
        }

        public global::System.Int32 Id { get; }

        public global::System.String OfficialName { get; }

        public global::System.Double MetresAboveSeaLevel { get; }

        public global::System.String? County { get; }

        public global::System.String? Municipality { get; }

        public global::System.Double PrimaryFactor { get; }

        public global::System.String? ReferencePoint { get; }

        public global::System.String? Comments { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class CommentUpdatedResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::MountainsClientDemoV2.CommentUpdatedResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::MountainsClientDemoV2.State.MountainCommentUpdatedInfoEntity, CommentUpdated_CommentUpdated_MountainCommentUpdatedInfo> _commentUpdated_CommentUpdated_MountainCommentUpdatedInfoFromMountainCommentUpdatedInfoEntityMapper;
        public CommentUpdatedResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::MountainsClientDemoV2.State.MountainCommentUpdatedInfoEntity, CommentUpdated_CommentUpdated_MountainCommentUpdatedInfo> commentUpdated_CommentUpdated_MountainCommentUpdatedInfoFromMountainCommentUpdatedInfoEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _commentUpdated_CommentUpdated_MountainCommentUpdatedInfoFromMountainCommentUpdatedInfoEntityMapper = commentUpdated_CommentUpdated_MountainCommentUpdatedInfoFromMountainCommentUpdatedInfoEntityMapper ?? throw new global::System.ArgumentNullException(nameof(commentUpdated_CommentUpdated_MountainCommentUpdatedInfoFromMountainCommentUpdatedInfoEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::MountainsClientDemoV2.ICommentUpdatedResult);
        public CommentUpdatedResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is CommentUpdatedResultInfo info)
            {
                return new CommentUpdatedResult(MapICommentUpdated_CommentUpdated(info.CommentUpdated, snapshot));
            }

            throw new global::System.ArgumentException("CommentUpdatedResultInfo expected.");
        }

        private global::MountainsClientDemoV2.ICommentUpdated_CommentUpdated? MapICommentUpdated_CommentUpdated(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("MountainCommentUpdatedInfo", global::System.StringComparison.Ordinal))
            {
                return _commentUpdated_CommentUpdated_MountainCommentUpdatedInfoFromMountainCommentUpdatedInfoEntityMapper.Map(snapshot.GetEntity<global::MountainsClientDemoV2.State.MountainCommentUpdatedInfoEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class CommentUpdatedResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public CommentUpdatedResultInfo(global::StrawberryShake.EntityId? commentUpdated, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            CommentUpdated = commentUpdated;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::StrawberryShake.EntityId? CommentUpdated { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new CommentUpdatedResultInfo(CommentUpdated, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class CommentUpdated_CommentUpdated_MountainCommentUpdatedInfoFromMountainCommentUpdatedInfoEntityMapper : global::StrawberryShake.IEntityMapper<global::MountainsClientDemoV2.State.MountainCommentUpdatedInfoEntity, CommentUpdated_CommentUpdated_MountainCommentUpdatedInfo>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public CommentUpdated_CommentUpdated_MountainCommentUpdatedInfoFromMountainCommentUpdatedInfoEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public CommentUpdated_CommentUpdated_MountainCommentUpdatedInfo Map(global::MountainsClientDemoV2.State.MountainCommentUpdatedInfoEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new CommentUpdated_CommentUpdated_MountainCommentUpdatedInfo(entity.Id, entity.OfficialName, entity.Comments);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class MountainsPageResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::MountainsClientDemoV2.MountainsPageResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::MountainsClientDemoV2.State.MountainEntity, MountainsPage_MountainsPage_Items_Mountain> _mountainsPage_MountainsPage_Items_MountainFromMountainEntityMapper;
        public MountainsPageResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::MountainsClientDemoV2.State.MountainEntity, MountainsPage_MountainsPage_Items_Mountain> mountainsPage_MountainsPage_Items_MountainFromMountainEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _mountainsPage_MountainsPage_Items_MountainFromMountainEntityMapper = mountainsPage_MountainsPage_Items_MountainFromMountainEntityMapper ?? throw new global::System.ArgumentNullException(nameof(mountainsPage_MountainsPage_Items_MountainFromMountainEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::MountainsClientDemoV2.IMountainsPageResult);
        public MountainsPageResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is MountainsPageResultInfo info)
            {
                return new MountainsPageResult(MapIMountainsPage_MountainsPage(info.MountainsPage, snapshot));
            }

            throw new global::System.ArgumentException("MountainsPageResultInfo expected.");
        }

        private global::MountainsClientDemoV2.IMountainsPage_MountainsPage? MapIMountainsPage_MountainsPage(global::MountainsClientDemoV2.State.MountainCollectionSegmentData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IMountainsPage_MountainsPage returnValue = default !;
            if (data?.__typename.Equals("MountainCollectionSegment", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new MountainsPage_MountainsPage_MountainCollectionSegment(data.TotalCount ?? throw new global::System.ArgumentNullException(), MapNonNullableIMountainsPage_MountainsPage_PageInfo(data.PageInfo ?? throw new global::System.ArgumentNullException(), snapshot), MapIMountainsPage_MountainsPage_ItemsNonNullableArray(data.Items, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::MountainsClientDemoV2.IMountainsPage_MountainsPage_PageInfo MapNonNullableIMountainsPage_MountainsPage_PageInfo(global::MountainsClientDemoV2.State.CollectionSegmentInfoData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IMountainsPage_MountainsPage_PageInfo returnValue = default !;
            if (data.__typename.Equals("CollectionSegmentInfo", global::System.StringComparison.Ordinal))
            {
                returnValue = new MountainsPage_MountainsPage_PageInfo_CollectionSegmentInfo(data.HasNextPage ?? throw new global::System.ArgumentNullException(), data.HasPreviousPage ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::MountainsClientDemoV2.IMountainsPage_MountainsPage_Items>? MapIMountainsPage_MountainsPage_ItemsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var mountains = new global::System.Collections.Generic.List<global::MountainsClientDemoV2.IMountainsPage_MountainsPage_Items>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                mountains.Add(MapNonNullableIMountainsPage_MountainsPage_Items(child, snapshot));
            }

            return mountains;
        }

        private global::MountainsClientDemoV2.IMountainsPage_MountainsPage_Items MapNonNullableIMountainsPage_MountainsPage_Items(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Mountain", global::System.StringComparison.Ordinal))
            {
                return _mountainsPage_MountainsPage_Items_MountainFromMountainEntityMapper.Map(snapshot.GetEntity<global::MountainsClientDemoV2.State.MountainEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class MountainsPageResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public MountainsPageResultInfo(global::MountainsClientDemoV2.State.MountainCollectionSegmentData? mountainsPage, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            MountainsPage = mountainsPage;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::MountainsClientDemoV2.State.MountainCollectionSegmentData? MountainsPage { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new MountainsPageResultInfo(MountainsPage, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class MountainsPage_MountainsPage_Items_MountainFromMountainEntityMapper : global::StrawberryShake.IEntityMapper<global::MountainsClientDemoV2.State.MountainEntity, MountainsPage_MountainsPage_Items_Mountain>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public MountainsPage_MountainsPage_Items_MountainFromMountainEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public MountainsPage_MountainsPage_Items_Mountain Map(global::MountainsClientDemoV2.State.MountainEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new MountainsPage_MountainsPage_Items_Mountain(entity.Id, entity.OfficialName, entity.MetresAboveSeaLevel, entity.County, entity.Municipality, entity.PrimaryFactor, entity.ReferencePoint, entity.Comments);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class UpdateMountainCommentResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::MountainsClientDemoV2.UpdateMountainCommentResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::MountainsClientDemoV2.State.MountainEntity, UpdateMountainComment_UpdateMountainComment_Mountain> _updateMountainComment_UpdateMountainComment_MountainFromMountainEntityMapper;
        public UpdateMountainCommentResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::MountainsClientDemoV2.State.MountainEntity, UpdateMountainComment_UpdateMountainComment_Mountain> updateMountainComment_UpdateMountainComment_MountainFromMountainEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _updateMountainComment_UpdateMountainComment_MountainFromMountainEntityMapper = updateMountainComment_UpdateMountainComment_MountainFromMountainEntityMapper ?? throw new global::System.ArgumentNullException(nameof(updateMountainComment_UpdateMountainComment_MountainFromMountainEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::MountainsClientDemoV2.IUpdateMountainCommentResult);
        public UpdateMountainCommentResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is UpdateMountainCommentResultInfo info)
            {
                return new UpdateMountainCommentResult(MapIUpdateMountainComment_UpdateMountainComment(info.UpdateMountainComment, snapshot));
            }

            throw new global::System.ArgumentException("UpdateMountainCommentResultInfo expected.");
        }

        private global::MountainsClientDemoV2.IUpdateMountainComment_UpdateMountainComment? MapIUpdateMountainComment_UpdateMountainComment(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Mountain", global::System.StringComparison.Ordinal))
            {
                return _updateMountainComment_UpdateMountainComment_MountainFromMountainEntityMapper.Map(snapshot.GetEntity<global::MountainsClientDemoV2.State.MountainEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class UpdateMountainCommentResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public UpdateMountainCommentResultInfo(global::StrawberryShake.EntityId? updateMountainComment, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            UpdateMountainComment = updateMountainComment;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::StrawberryShake.EntityId? UpdateMountainComment { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new UpdateMountainCommentResultInfo(UpdateMountainComment, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class UpdateMountainComment_UpdateMountainComment_MountainFromMountainEntityMapper : global::StrawberryShake.IEntityMapper<global::MountainsClientDemoV2.State.MountainEntity, UpdateMountainComment_UpdateMountainComment_Mountain>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public UpdateMountainComment_UpdateMountainComment_MountainFromMountainEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public UpdateMountainComment_UpdateMountainComment_Mountain Map(global::MountainsClientDemoV2.State.MountainEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new UpdateMountainComment_UpdateMountainComment_Mountain(entity.Id, entity.Comments);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetMountainResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::MountainsClientDemoV2.GetMountainResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::MountainsClientDemoV2.State.MountainEntity, GetMountain_Mountain_Mountain> _getMountain_Mountain_MountainFromMountainEntityMapper;
        public GetMountainResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::MountainsClientDemoV2.State.MountainEntity, GetMountain_Mountain_Mountain> getMountain_Mountain_MountainFromMountainEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getMountain_Mountain_MountainFromMountainEntityMapper = getMountain_Mountain_MountainFromMountainEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMountain_Mountain_MountainFromMountainEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::MountainsClientDemoV2.IGetMountainResult);
        public GetMountainResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetMountainResultInfo info)
            {
                return new GetMountainResult(MapIGetMountain_Mountain(info.Mountain, snapshot));
            }

            throw new global::System.ArgumentException("GetMountainResultInfo expected.");
        }

        private global::MountainsClientDemoV2.IGetMountain_Mountain? MapIGetMountain_Mountain(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Mountain", global::System.StringComparison.Ordinal))
            {
                return _getMountain_Mountain_MountainFromMountainEntityMapper.Map(snapshot.GetEntity<global::MountainsClientDemoV2.State.MountainEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetMountainResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetMountainResultInfo(global::StrawberryShake.EntityId? mountain, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Mountain = mountain;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::StrawberryShake.EntityId? Mountain { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetMountainResultInfo(Mountain, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetMountain_Mountain_MountainFromMountainEntityMapper : global::StrawberryShake.IEntityMapper<global::MountainsClientDemoV2.State.MountainEntity, GetMountain_Mountain_Mountain>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMountain_Mountain_MountainFromMountainEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMountain_Mountain_Mountain Map(global::MountainsClientDemoV2.State.MountainEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMountain_Mountain_Mountain(entity.Id, entity.OfficialName, entity.MetresAboveSeaLevel, entity.PrimaryFactor, entity.ReferencePoint, entity.County, entity.Comments, entity.Municipality);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetMountainsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::MountainsClientDemoV2.GetMountainsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::MountainsClientDemoV2.State.MountainEntity, GetMountains_Mountains_Mountain> _getMountains_Mountains_MountainFromMountainEntityMapper;
        public GetMountainsResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::MountainsClientDemoV2.State.MountainEntity, GetMountains_Mountains_Mountain> getMountains_Mountains_MountainFromMountainEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getMountains_Mountains_MountainFromMountainEntityMapper = getMountains_Mountains_MountainFromMountainEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMountains_Mountains_MountainFromMountainEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::MountainsClientDemoV2.IGetMountainsResult);
        public GetMountainsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetMountainsResultInfo info)
            {
                return new GetMountainsResult(MapNonNullableIGetMountains_MountainsNonNullableArray(info.Mountains, snapshot));
            }

            throw new global::System.ArgumentException("GetMountainsResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::MountainsClientDemoV2.IGetMountains_Mountains> MapNonNullableIGetMountains_MountainsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var mountains = new global::System.Collections.Generic.List<global::MountainsClientDemoV2.IGetMountains_Mountains>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                mountains.Add(MapNonNullableIGetMountains_Mountains(child, snapshot));
            }

            return mountains;
        }

        private global::MountainsClientDemoV2.IGetMountains_Mountains MapNonNullableIGetMountains_Mountains(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Mountain", global::System.StringComparison.Ordinal))
            {
                return _getMountains_Mountains_MountainFromMountainEntityMapper.Map(snapshot.GetEntity<global::MountainsClientDemoV2.State.MountainEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetMountainsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetMountainsResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> mountains, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Mountains = mountains;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Mountains { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetMountainsResultInfo(Mountains, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetMountains_Mountains_MountainFromMountainEntityMapper : global::StrawberryShake.IEntityMapper<global::MountainsClientDemoV2.State.MountainEntity, GetMountains_Mountains_Mountain>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMountains_Mountains_MountainFromMountainEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMountains_Mountains_Mountain Map(global::MountainsClientDemoV2.State.MountainEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMountains_Mountains_Mountain(entity.Id, entity.OfficialName, entity.MetresAboveSeaLevel, entity.PrimaryFactor, entity.ReferencePoint, entity.County, entity.Municipality, entity.Comments);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class CommentUpdatedBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MountainsClientDemoV2.ICommentUpdatedResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::MountainsClientDemoV2.ICommentUpdatedResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public CommentUpdatedBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::MountainsClientDemoV2.ICommentUpdatedResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<ICommentUpdatedResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (ICommentUpdatedResult Result, CommentUpdatedResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<ICommentUpdatedResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (ICommentUpdatedResult, CommentUpdatedResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? commentUpdatedId = default !;
            _entityStore.Update(session =>
            {
                commentUpdatedId = UpdateICommentUpdated_CommentUpdatedEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "commentUpdated"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new CommentUpdatedResultInfo(commentUpdatedId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateICommentUpdated_CommentUpdatedEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("MountainCommentUpdatedInfo", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::MountainsClientDemoV2.State.MountainCommentUpdatedInfoEntity? entity))
                {
                    session.SetEntity(entityId, new global::MountainsClientDemoV2.State.MountainCommentUpdatedInfoEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "officialName")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "comments"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::MountainsClientDemoV2.State.MountainCommentUpdatedInfoEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "officialName")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "comments"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32? DeserializeInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class MountainsPageBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MountainsClientDemoV2.IMountainsPageResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::MountainsClientDemoV2.IMountainsPageResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        public MountainsPageBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::MountainsClientDemoV2.IMountainsPageResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
        }

        public global::StrawberryShake.IOperationResult<IMountainsPageResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IMountainsPageResult Result, MountainsPageResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IMountainsPageResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IMountainsPageResult, MountainsPageResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::MountainsClientDemoV2.State.MountainCollectionSegmentData? mountainsPageId = default !;
            _entityStore.Update(session =>
            {
                mountainsPageId = DeserializeIMountainsPage_MountainsPage(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "mountainsPage"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new MountainsPageResultInfo(mountainsPageId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::MountainsClientDemoV2.State.MountainCollectionSegmentData? DeserializeIMountainsPage_MountainsPage(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("MountainCollectionSegment", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::MountainsClientDemoV2.State.MountainCollectionSegmentData(typename, totalCount: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "totalCount")), pageInfo: DeserializeNonNullableIMountainsPage_MountainsPage_PageInfo(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "pageInfo")), items: UpdateIMountainsPage_MountainsPage_ItemsEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "items"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::MountainsClientDemoV2.State.CollectionSegmentInfoData DeserializeNonNullableIMountainsPage_MountainsPage_PageInfo(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("CollectionSegmentInfo", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::MountainsClientDemoV2.State.CollectionSegmentInfoData(typename, hasNextPage: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hasNextPage")), hasPreviousPage: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hasPreviousPage")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? UpdateIMountainsPage_MountainsPage_ItemsEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var mountains = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                mountains.Add(UpdateNonNullableIMountainsPage_MountainsPage_ItemsEntity(session, child, entityIds));
            }

            return mountains;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIMountainsPage_MountainsPage_ItemsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Mountain", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::MountainsClientDemoV2.State.MountainEntity? entity))
                {
                    session.SetEntity(entityId, new global::MountainsClientDemoV2.State.MountainEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "officialName")), DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "metresAboveSeaLevel")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "county")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "municipality")), DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "primaryFactor")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "referencePoint")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "comments"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::MountainsClientDemoV2.State.MountainEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "officialName")), DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "metresAboveSeaLevel")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "county")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "municipality")), DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "primaryFactor")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "referencePoint")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "comments"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Double DeserializeNonNullableDouble(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _floatParser.Parse(obj.Value.GetDouble()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class UpdateMountainCommentBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MountainsClientDemoV2.IUpdateMountainCommentResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::MountainsClientDemoV2.IUpdateMountainCommentResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public UpdateMountainCommentBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::MountainsClientDemoV2.IUpdateMountainCommentResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IUpdateMountainCommentResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IUpdateMountainCommentResult Result, UpdateMountainCommentResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IUpdateMountainCommentResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IUpdateMountainCommentResult, UpdateMountainCommentResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? updateMountainCommentId = default !;
            _entityStore.Update(session =>
            {
                updateMountainCommentId = UpdateIUpdateMountainComment_UpdateMountainCommentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "updateMountainComment"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new UpdateMountainCommentResultInfo(updateMountainCommentId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateIUpdateMountainComment_UpdateMountainCommentEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Mountain", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::MountainsClientDemoV2.State.MountainEntity? entity))
                {
                    session.SetEntity(entityId, new global::MountainsClientDemoV2.State.MountainEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), entity.OfficialName, entity.MetresAboveSeaLevel, entity.County, entity.Municipality, entity.PrimaryFactor, entity.ReferencePoint, DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "comments"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::MountainsClientDemoV2.State.MountainEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), default !, default !, default !, default !, default !, default !, DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "comments"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetMountainBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MountainsClientDemoV2.IGetMountainResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::MountainsClientDemoV2.IGetMountainResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        public GetMountainBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::MountainsClientDemoV2.IGetMountainResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetMountainResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetMountainResult Result, GetMountainResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetMountainResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetMountainResult, GetMountainResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? mountainId = default !;
            _entityStore.Update(session =>
            {
                mountainId = UpdateIGetMountain_MountainEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "mountain"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetMountainResultInfo(mountainId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateIGetMountain_MountainEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Mountain", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::MountainsClientDemoV2.State.MountainEntity? entity))
                {
                    session.SetEntity(entityId, new global::MountainsClientDemoV2.State.MountainEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "officialName")), DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "metresAboveSeaLevel")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "county")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "municipality")), DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "primaryFactor")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "referencePoint")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "comments"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::MountainsClientDemoV2.State.MountainEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "officialName")), DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "metresAboveSeaLevel")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "county")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "municipality")), DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "primaryFactor")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "referencePoint")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "comments"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Double DeserializeNonNullableDouble(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _floatParser.Parse(obj.Value.GetDouble()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetMountainsBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MountainsClientDemoV2.IGetMountainsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::MountainsClientDemoV2.IGetMountainsResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        public GetMountainsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::MountainsClientDemoV2.IGetMountainsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetMountainsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetMountainsResult Result, GetMountainsResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetMountainsResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetMountainsResult, GetMountainsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> mountainsId = default !;
            _entityStore.Update(session =>
            {
                mountainsId = UpdateNonNullableIGetMountains_MountainsEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "mountains"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetMountainsResultInfo(mountainsId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetMountains_MountainsEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var mountains = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                mountains.Add(UpdateNonNullableIGetMountains_MountainsEntity(session, child, entityIds));
            }

            return mountains;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetMountains_MountainsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Mountain", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::MountainsClientDemoV2.State.MountainEntity? entity))
                {
                    session.SetEntity(entityId, new global::MountainsClientDemoV2.State.MountainEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "officialName")), DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "metresAboveSeaLevel")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "county")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "municipality")), DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "primaryFactor")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "referencePoint")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "comments"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::MountainsClientDemoV2.State.MountainEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "officialName")), DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "metresAboveSeaLevel")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "county")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "municipality")), DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "primaryFactor")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "referencePoint")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "comments"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Double DeserializeNonNullableDouble(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _floatParser.Parse(obj.Value.GetDouble()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class MountainCollectionSegmentData
    {
        public MountainCollectionSegmentData(global::System.String __typename, global::System.Int32? totalCount = default !, global::MountainsClientDemoV2.State.CollectionSegmentInfoData? pageInfo = default !, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? items = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            TotalCount = totalCount;
            PageInfo = pageInfo;
            Items = items;
        }

        public global::System.String __typename { get; }

        public global::System.Int32? TotalCount { get; }

        ///<summary>Information to aid in pagination.</summary>
        public global::MountainsClientDemoV2.State.CollectionSegmentInfoData? PageInfo { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? Items { get; }
    }

    ///<summary>Information about the offset pagination.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class CollectionSegmentInfoData
    {
        public CollectionSegmentInfoData(global::System.String __typename, global::System.Boolean? hasNextPage = default !, global::System.Boolean? hasPreviousPage = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            HasNextPage = hasNextPage;
            HasPreviousPage = hasPreviousPage;
        }

        public global::System.String __typename { get; }

        ///<summary>Indicates whether more items exist following the set defined by the clients arguments.</summary>
        public global::System.Boolean? HasNextPage { get; }

        ///<summary>Indicates whether more items exist prior the set defined by the clients arguments.</summary>
        public global::System.Boolean? HasPreviousPage { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class MountainsDemoV2EntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                "MountainCommentUpdatedInfo" => ParseMountainCommentUpdatedInfoEntityId(obj, __typename),
                "Mountain" => ParseMountainEntityId(obj, __typename),
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                "MountainCommentUpdatedInfo" => FormatMountainCommentUpdatedInfoEntityId(entityId),
                "Mountain" => FormatMountainEntityId(entityId),
                _ => throw new global::System.NotSupportedException()};
        }

        private global::StrawberryShake.EntityId ParseMountainCommentUpdatedInfoEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatMountainCommentUpdatedInfoEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseMountainEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatMountainEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class MountainsDemoV2StoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public MountainsDemoV2StoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}
